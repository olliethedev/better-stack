/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SitemapDotxmlRouteImport } from './routes/sitemap[.]xml'
import { Route as PagesRouteRouteImport } from './routes/pages/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PagesSplatRouteImport } from './routes/pages/$'
import { Route as ApiDataSplatRouteImport } from './routes/api/data/$'

const SitemapDotxmlRoute = SitemapDotxmlRouteImport.update({
  id: '/sitemap.xml',
  path: '/sitemap.xml',
  getParentRoute: () => rootRouteImport,
} as any)
const PagesRouteRoute = PagesRouteRouteImport.update({
  id: '/pages',
  path: '/pages',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PagesSplatRoute = PagesSplatRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => PagesRouteRoute,
} as any)
const ApiDataSplatRoute = ApiDataSplatRouteImport.update({
  id: '/api/data/$',
  path: '/api/data/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/pages': typeof PagesRouteRouteWithChildren
  '/sitemap.xml': typeof SitemapDotxmlRoute
  '/pages/$': typeof PagesSplatRoute
  '/api/data/$': typeof ApiDataSplatRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/pages': typeof PagesRouteRouteWithChildren
  '/sitemap.xml': typeof SitemapDotxmlRoute
  '/pages/$': typeof PagesSplatRoute
  '/api/data/$': typeof ApiDataSplatRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/pages': typeof PagesRouteRouteWithChildren
  '/sitemap.xml': typeof SitemapDotxmlRoute
  '/pages/$': typeof PagesSplatRoute
  '/api/data/$': typeof ApiDataSplatRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/pages' | '/sitemap.xml' | '/pages/$' | '/api/data/$'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/pages' | '/sitemap.xml' | '/pages/$' | '/api/data/$'
  id: '__root__' | '/' | '/pages' | '/sitemap.xml' | '/pages/$' | '/api/data/$'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PagesRouteRoute: typeof PagesRouteRouteWithChildren
  SitemapDotxmlRoute: typeof SitemapDotxmlRoute
  ApiDataSplatRoute: typeof ApiDataSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sitemap.xml': {
      id: '/sitemap.xml'
      path: '/sitemap.xml'
      fullPath: '/sitemap.xml'
      preLoaderRoute: typeof SitemapDotxmlRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pages': {
      id: '/pages'
      path: '/pages'
      fullPath: '/pages'
      preLoaderRoute: typeof PagesRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pages/$': {
      id: '/pages/$'
      path: '/$'
      fullPath: '/pages/$'
      preLoaderRoute: typeof PagesSplatRouteImport
      parentRoute: typeof PagesRouteRoute
    }
    '/api/data/$': {
      id: '/api/data/$'
      path: '/api/data/$'
      fullPath: '/api/data/$'
      preLoaderRoute: typeof ApiDataSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface PagesRouteRouteChildren {
  PagesSplatRoute: typeof PagesSplatRoute
}

const PagesRouteRouteChildren: PagesRouteRouteChildren = {
  PagesSplatRoute: PagesSplatRoute,
}

const PagesRouteRouteWithChildren = PagesRouteRoute._addFileChildren(
  PagesRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PagesRouteRoute: PagesRouteRouteWithChildren,
  SitemapDotxmlRoute: SitemapDotxmlRoute,
  ApiDataSplatRoute: ApiDataSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
